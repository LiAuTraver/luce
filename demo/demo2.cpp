#include <algorithm>
#include <fstream>
#include <iostream>
#include <ranges>
#include <array>
#include <cstddef>
#include <compare>
#include <iterator>
#include <span>
#include <string>
#include <variant>
#include <vector>
#include <absl/strings/string_view.h>
#include <fmt/core.h>
#include <fmt/ostream.h>
#include <fmt/ranges.h>

#include <accat/auxilia/auxilia.hpp>
#include "Support/isa/architecture.hpp"

int main() {
  accat::luce::isa::GeneralPurposeRegisters registers;
  using B = std::byte;
  constexpr auto arr = std::array<std::byte, 128>{
      B{0x00}, B{0x01}, B{0x02}, B{0x03}, B{0x04}, B{0x05}, B{0x06}, B{0x07},
      B{0x08}, B{0x09}, B{0x0a}, B{0x0b}, B{0x0c}, B{0x0d}, B{0x0e}, B{0x0f},
      B{0x10}, B{0x11}, B{0x12}, B{0x13}, B{0x14}, B{0x15}, B{0x16}, B{0x17},
      B{0x18}, B{0x19}, B{0x1a}, B{0x1b}, B{0x1c}, B{0x1d}, B{0x1e}, B{0x1f},
      B{0x20}, B{0x21}, B{0x22}, B{0x23}, B{0x24}, B{0x25}, B{0x26}, B{0x27},
      B{0x28}, B{0x29}, B{0x2a}, B{0x2b}, B{0x2c}, B{0x2d}, B{0x2e}, B{0x2f},
      B{0x30}, B{0x31}, B{0x32}, B{0x33}, B{0x34}, B{0x35}, B{0x36}, B{0x37},
      B{0x38}, B{0x39}, B{0x3a}, B{0x3b}, B{0x3c}, B{0x3d}, B{0x3e}, B{0x3f},
      B{0x40}, B{0x41}, B{0x42}, B{0x43}, B{0x44}, B{0x45}, B{0x46}, B{0x47},
      B{0x48}, B{0x49}, B{0x4a}, B{0x4b}, B{0x4c}, B{0x4d}, B{0x4e}, B{0x4f},
      B{0x50}, B{0x51}, B{0x52}, B{0x53}, B{0x54}, B{0x55}, B{0x56}, B{0x57},
      B{0x58}, B{0x59}, B{0x5a}, B{0x5b}, B{0x5c}, B{0x5d}, B{0x5e}, B{0x5f},
      B{0x60}, B{0x61}, B{0x62}, B{0x63}, B{0x64}, B{0x65}, B{0x66}, B{0x67},
      B{0x68}, B{0x69}, B{0x6a}, B{0x6b}, B{0x6c}, B{0x6d}, B{0x6e}, B{0x6f},
      B{0x70}, B{0x71}, B{0x72}, B{0x73}, B{0x74}, B{0x75}, B{0x76}, B{0x77},
      B{0x78}, B{0x79}, B{0x7a}, B{0x7b}, B{0x7c}, B{0x7d}, B{0x7e}, B{0x7f}};
  size_t i = 0;
  for (auto &reg : registers.general_purpose_registers) {
    reg = {arr[i], arr[i + 1], arr[i + 2], arr[i + 3]};
    i += 4;
  }
  using enum accat::auxilia::FormatPolicy;
  std::cout << "\n\n\n"
            << registers.to_string(kDefault)
            << std::endl;
  std::cout << "\n\n\n"
            << registers.to_string(kDetailed)
            << std::endl;
  std::cout << "\n\n\n"
            << registers.to_string(kBrief)
            << std::endl;
}
